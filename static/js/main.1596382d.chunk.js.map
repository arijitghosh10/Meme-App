{"version":3,"sources":["components/Favourites.js","components/Heading.js","components/NewMeme.js","components/SearchMeme.js","App.js","index.js"],"names":["Favourites","props","memes","useState","memeArray","setMemeArray","Loading","setLoading","useEffect","fetch","then","res","json","data","key","push","String","showloginButton","className","length","href","showlogoutButton","map","val","ind","src","alt","Heading","NewMeme","temp","clickHandler","url","name","onClick","id","SearchMeme","setMemes","template","setTemplate","meme","setMeme","captions","setCaptions","copied","setCopied","clipboard","useClipboard","Array","box_count","fill","onSubmit","e","preventDefault","currentMeme","formData","FormData","append","forEach","caps","method","body","response","createMeme","typeof","placeholder","onChange","index","inputText","target","value","i","updateCaption","copy","JSON","stringify","headers","App","clientID","setShowloginButton","setShowlogoutButton","clientId","buttonText","onSuccess","onFailure","alert","cookiePolicy","isSignedIn","onLogoutSuccess","exact","path","element","ReactDOM","render","document","getElementById"],"mappings":"2VA0CeA,EAvCI,SAACC,GAChB,IAAMC,EAAQ,GACd,EAAiCC,mBAAS,IAA1C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA6BF,oBAAS,GAAtC,mBAAOG,EAAP,KAAeC,EAAf,KAaA,OAZAC,qBAAU,WACND,GAAW,GACXE,MAAM,4EAA4EC,MAAK,SAAAC,GACnFA,EAAIC,OAAOF,MAAK,SAAAG,GACZ,IAAI,IAAMC,KAAOD,EACbX,EAAMa,KAAKC,OAAOH,EAAKC,KAE3BT,EAAaH,GACbK,GAAW,WAGrB,IAEE,qCACKN,EAAMgB,iBAAmB,mBAAGC,UAAU,SAAb,yCACxBd,EAAUe,SAAWb,IAAYL,EAAMgB,iBACrC,sBAAKC,UAAU,SAAf,UACI,iEACA,mBAAGE,KAAK,IAAR,4BAGPd,GAAY,oBAAIY,UAAU,cAAd,yBACPZ,GAAWL,EAAMoB,kBAAoBjB,EAAUe,QAAU,sBAAKD,UAAU,UAAf,cAA2Bd,EAAUkB,KAAI,SAACC,EAAIC,GACrG,OACI,qBACIN,UAAU,eACVO,IAAKF,EAELG,IAAI,QADCF,MAIlB,mBAAGJ,KAAK,IAAR,0BAT4D,WCnB5DO,G,MARC,WACZ,OACI,sBAAKT,UAAU,UAAf,UACI,kEACA,mBAAGE,KAAK,cAAR,6B,QCSGQ,G,MAbE,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAKC,EAAiB,EAAjBA,aACpB,OACI,sBAAKZ,UAAU,WAAf,UACI,qBACIO,IAAKI,EAAKE,IAEVL,IAAKG,EAAKG,KACVC,QAASH,GAFJD,EAAKK,IAId,8BAAML,EAAKG,YC4GRG,G,MAnHI,WACf,MAAyBhC,mBAAS,IAAlC,mBAAOD,EAAP,KAAakC,EAAb,KACA,EAA+BjC,mBAAS,MAAxC,mBAAOkC,EAAP,KAAgBC,EAAhB,KACA,EAAuBnC,mBAAS,MAAhC,mBAAOoC,EAAP,KAAYC,EAAZ,KACA,EAA+BrC,mBAAS,IAAxC,mBAAOsC,EAAP,KAAgBC,EAAhB,KACA,EAA2BvC,oBAAS,GAApC,mBAAOwC,EAAP,KAAcC,EAAd,KAuCMC,EAAYC,yBAwBlB,OAVAtC,qBAAU,WACNC,MAAM,qCAAqCC,MAAK,SAAAC,GAC5CA,EAAIC,OAAOF,MAAK,SAAAC,GACZyB,EAASzB,EAAIE,KAAKX,eAG1B,IACJM,qBAAU,WACH6B,GAAUK,EAAYK,MAAMV,EAASW,WAAWC,KAAK,OAC1D,CAACZ,IAEC,sBAAKnB,UAAU,UAAf,UACKmB,GACG,sBAAKnB,UAAU,UAAf,UACA,qBAAKO,IAAKY,EAASN,IAAuBL,IAAKW,EAASL,MAA3BK,EAASH,IACtC,uBACIhB,UAAU,UACVgC,SAAU,SAACC,GAAD,OAlDP,SAACA,GAChBA,EAAEC,iBACF,IAAMC,EAAchB,EACdiB,EAAW,IAAIC,SACrBD,EAASE,OAAO,WAAW,aAC3BF,EAASE,OAAO,WAAW,iBAC3BF,EAASE,OAAO,cAAcH,EAAYnB,IAC1CO,EAASgB,SAAQ,SAACC,EAAKlC,GAAN,OAAY8B,EAASE,OAAT,gBAAyBhC,EAAzB,WAAsCkC,MAEnEjD,MAAM,wCAAwC,CAC1CkD,OAAO,OACPC,KAAKN,IACN5C,MAAK,SAAAC,GACJA,EAAIC,OAAOF,MAAK,SAAAmD,GACZrB,EAAQqB,EAAShD,KAAKkB,KACtBa,GAAU,SAmCSkB,CAAWX,IAF9B,UAIKV,GAAYA,EAASnB,KAAI,SAACC,EAAIC,GAC3B,OAAO,uBAEHuC,OAAO,OACPC,YAAY,aACZC,SAAU,SAACd,GAAD,OA3EZ,SAACA,EAAEe,GACrB,IAAMC,EAAYhB,EAAEiB,OAAOC,OAAS,GACpC3B,EACID,EAASnB,KAAI,SAACC,EAAI+C,GACd,OAAGJ,IAAQI,EACAH,EAEA5C,MAoEgBgD,CAAcpB,EAAE3B,KAH1BA,MAOb,wBAAQN,UAAU,MAAM6C,OAAO,SAA/B,oBACA,wBACIA,OAAO,SACP7C,UAAU,aAAae,QAtEvB,WAChBK,EAAY,MACZE,EAAQ,MACRE,EAAY,IACZE,GAAU,IAgEE,wBAOPL,GACG,sBAAKrB,UAAU,aAAf,UACI,qBAAKO,IAAKc,EAAMb,IAAI,SACpB,sBAAKR,UAAU,WAAf,UACI,wBAAQA,UAAU,MAAMe,QArDrB,WACnBY,EAAU2B,KAAKjC,GACfK,GAAU,IAmDM,SAAkDD,EAAS,cAAgB,cAC3E,wBAAQzB,UAAU,MAAMe,QAlDpB,WACpBxB,MAAM,2EAA4E,CAC9EkD,OAAQ,OACRC,KAAMa,KAAKC,UAAUnC,GACrBoC,QAAS,CACL,eAAgB,uBA6CR,+BACA,wBAAQzD,UAAU,aAAae,QAAS,WAAKO,EAAQ,MAAMI,GAAU,IAArE,2BAIVP,GAAYnC,EAAMoB,KAAI,SAAAO,GACpB,OACI,cAAC,EAAD,CACIA,KAAMA,EACNC,aAAc,WAAKQ,EAAYT,cC5DxC+C,EA5CH,WACR,IAAMC,EAAW,2EACjB,EAA8C1E,oBAAS,GAAvD,mBAAOc,EAAP,KAAwB6D,EAAxB,KACA,EAAgD3E,oBAAS,GAAzD,mBAAOkB,EAAP,KAAyB0D,EAAzB,KAeF,OACE,sBAAK7D,UAAU,SAAf,UACE,cAAC,EAAD,IACCD,GACS,cAAC,cAAD,CACI+D,SAAUH,EACVI,WAAW,sBACXC,UArBO,SAACvE,GACpBmE,GAAmB,GACnBC,GAAoB,IAoBRI,UAjBO,SAACxE,GACpByE,MAAM,iBAiBMC,aAAc,qBACdC,YAAY,IAEnBjE,GACG,cAAC,eAAD,CACI2D,SAAUH,EACVI,WAAW,WACXM,gBArBS,WACrBH,MAAM,yCACNN,GAAmB,GACnBC,GAAoB,MAqBpB,eAAC,IAAD,WACE,cAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,IAAIC,QAAS,cAAC,EAAD,MAC/B,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,cAAcC,QAAS,cAAC,EAAD,CAAYzE,gBAAiBA,EAAiBI,iBAAkBA,a,OCxCnHsE,IAASC,OAAO,cAAC,IAAD,UAAY,cAAC,EAAD,MAAsBC,SAASC,eAAe,W","file":"static/js/main.1596382d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Favourites.css'\r\nimport { useEffect, useState } from \"react/cjs/react.development\";\r\nconst Favourites = (props)=>{\r\n    const memes = []\r\n    const [memeArray,setMemeArray] = useState([]);\r\n    const [Loading,setLoading] = useState(false);\r\n    useEffect(()=>{\r\n        setLoading(true)\r\n        fetch(\"https://meme-generator-4ac47-default-rtdb.firebaseio.com/favourites.json\").then(res =>{\r\n            res.json().then(data =>{\r\n                for(const key in data) {\r\n                    memes.push(String(data[key]))\r\n                }\r\n                setMemeArray(memes)\r\n                setLoading(false)\r\n            })\r\n        })\r\n    },[])\r\n    return (\r\n        <>\r\n            {props.showloginButton && <p className=\"signIn\">Sign in to save your memes</p>}\r\n            {!memeArray.length && !Loading && !props.showloginButton &&\r\n                <div className=\"noMeme\">\r\n                    <h2>You do not have any saved memes</h2>\r\n                    <a href=\"/\">Create One!</a>\r\n                </div>\r\n            }\r\n            {Loading &&  <h3 className=\"loadingText\">Loading...</h3>}\r\n                {!Loading && props.showlogoutButton && memeArray.length && <div className=\"myMemes\"> {memeArray.map((val,ind)=>{\r\n                    return (\r\n                        <img\r\n                            className=\"mymemeimages\"\r\n                            src={val}\r\n                            key={ind}\r\n                            alt=\"meme\"\r\n                        />\r\n                    )\r\n            })}<a href=\"/\">Create More!</a> </div>} \r\n        </>    \r\n    )\r\n}\r\nexport default Favourites;","import React from \"react\";\r\nimport './Heading.css'\r\nconst Heading = ()=>{\r\n    return (\r\n        <div className=\"heading\">\r\n            <h1>Create your own memeüòÅ</h1>\r\n            <a href=\"/favourites\">Favourites</a>\r\n        </div>\r\n    )\r\n}\r\nexport default Heading;","import React from \"react\";\r\nimport './NewMeme.css'\r\n const NewMeme = ({temp,clickHandler}) =>{\r\n    return (\r\n        <div className=\"newImage\">\r\n            <img \r\n                src={temp.url}\r\n                key={temp.id}\r\n                alt={temp.name}\r\n                onClick={clickHandler}\r\n            />\r\n            <div>{temp.name}</div>\r\n        </div>\r\n    )\r\n}\r\nexport default NewMeme;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useClipboard } from \"use-clipboard-copy\";\r\nimport NewMeme from \"./NewMeme\";\r\nimport './SearchMeme.css'\r\nconst SearchMeme = ()=>{\r\n    const [memes,setMemes] = useState([]);\r\n    const [template,setTemplate] = useState(null);\r\n    const [meme,setMeme] = useState(null);\r\n    const [captions,setCaptions] = useState([])\r\n    const [copied,setCopied] = useState(false)\r\n\r\n    const updateCaption = (e,index)=>{\r\n        const inputText = e.target.value || '';\r\n        setCaptions(\r\n            captions.map((val,i)=>{\r\n                if(index===i){\r\n                    return inputText\r\n                }else{\r\n                    return val\r\n                }\r\n            })\r\n        )\r\n    }\r\n    const backHandler = ()=>{\r\n        setTemplate(null)\r\n        setMeme(null)\r\n        setCaptions([])\r\n        setCopied(false)\r\n    }\r\n    const createMeme = (e)=>{\r\n        e.preventDefault()\r\n        const currentMeme = template;\r\n        const formData = new FormData();\r\n        formData.append('username','arijitg10');\r\n        formData.append('password','@rijitGHOSH10');\r\n        formData.append('template_id',currentMeme.id)\r\n        captions.forEach((caps,ind)=>formData.append(`boxes[${ind}][text]`,caps)) \r\n\r\n        fetch(\"https://api.imgflip.com/caption_image\",{\r\n            method:'POST',\r\n            body:formData\r\n        }).then(res=>{\r\n            res.json().then(response=>{\r\n                setMeme(response.data.url)\r\n                setCopied(false)\r\n            })\r\n        })\r\n    }\r\n    const clipboard = useClipboard()\r\n    const addToClipboard = ()=>{\r\n        clipboard.copy(meme);\r\n        setCopied(true)\r\n    }\r\n    const addToFavourites = ()=>{\r\n        fetch('https://meme-generator-4ac47-default-rtdb.firebaseio.com/favourites.json', {\r\n            method: 'POST',\r\n            body: JSON.stringify(meme),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n    }\r\n    useEffect(()=>{\r\n        fetch(\"https://api.imgflip.com/get_memes\").then(res =>{\r\n            res.json().then(res =>{\r\n                setMemes(res.data.memes)\r\n            })\r\n        })\r\n    } , [])\r\n    useEffect(()=>{\r\n        if(template) setCaptions(Array(template.box_count).fill(''))\r\n    },[template])\r\n    return ( \r\n        <div className=\"wrapper\">\r\n            {template && ( \r\n                <div className=\"makeNew\">\r\n                <img src={template.url} key={template.id} alt={template.name} />\r\n                <form \r\n                    className=\"newForm\"\r\n                    onSubmit={(e)=>createMeme(e)}\r\n                >\r\n                    {captions && captions.map((val,ind)=>{\r\n                        return <input \r\n                            key={ind}\r\n                            typeof=\"text\" \r\n                            placeholder=\"Enter text\"  \r\n                            onChange={(e)=>updateCaption(e,ind)} \r\n                    />\r\n                    })}\r\n                    \r\n                    <button className=\"btn\" typeof=\"submit\">Create</button>\r\n                    <button\r\n                        typeof=\"buttom\"\r\n                        className=\"btn cancel\" onClick={backHandler}>Back\r\n                    </button>\r\n                </form>\r\n                </div>\r\n            )}\r\n            {meme && \r\n                <div className=\"savememDiv\"> \r\n                    <img src={meme} alt=\"meme\" />\r\n                    <div className=\"savememe\">\r\n                        <button className=\"btn\" onClick={addToClipboard}>{copied ? 'Link Copied' : 'Copy Link'}</button>\r\n                        <button className=\"btn\" onClick={addToFavourites}>Add to favourites</button>\r\n                        <button className=\"btn cancel\" onClick={()=>{setMeme(null);setCopied(false)}}>Cancel</button>\r\n                    </div>\r\n                </div>\r\n            }\r\n            {!template && memes.map(temp =>{\r\n                return (\r\n                    <NewMeme \r\n                        temp={temp}\r\n                        clickHandler={()=>{setTemplate(temp)}} \r\n                    />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\nexport default SearchMeme;","import React,{ useState } from 'react';\nimport { Route,Routes } from 'react-router-dom';\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\nimport './App.css';\nimport Favourites from './components/Favourites';\nimport Heading from './components/Heading';\nimport SearchMeme from './components/SearchMeme';\n\nconst App = () => {\n    const clientID = '561198278802-krums0hsisfrp5atk6ekhul8ajtvgus3.apps.googleusercontent.com';\n    const [showloginButton, setShowloginButton] = useState(true);\n    const [showlogoutButton, setShowlogoutButton] = useState(false);\n    const onLoginSuccess = (res) => {\n        setShowloginButton(false);\n        setShowlogoutButton(true);\n    }\n    \n    const onLoginFailure = (res) => {\n        alert(\"Login Failed\");\n    }\n    \n    const onSignoutSuccess = () => {\n        alert(\"You have been logged out successfully\");\n        setShowloginButton(true);\n        setShowlogoutButton(false);\n    }\n  return (\n    <div className='layout'>\n      <Heading />\n      {showloginButton &&\n                <GoogleLogin\n                    clientId={clientID}\n                    buttonText=\"Sign In with google\"\n                    onSuccess={onLoginSuccess}\n                    onFailure={onLoginFailure}\n                    cookiePolicy={'single_host_origin'}\n                    isSignedIn={true}\n                />}\n            {showlogoutButton &&\n                <GoogleLogout\n                    clientId={clientID}\n                    buttonText=\"Sign Out\"\n                    onLogoutSuccess={onSignoutSuccess}\n                >\n                </GoogleLogout>}\n        <Routes>\n          <Route exact path='/' element={<SearchMeme />} />\n          <Route exact path='/favourites' element={<Favourites showloginButton={showloginButton} showlogoutButton={showlogoutButton} />} />\n        </Routes>\n    </div>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n"],"sourceRoot":""}